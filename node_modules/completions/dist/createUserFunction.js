"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserFunction = exports.FunctionZodSchema = void 0;
const zod_1 = require("zod");
const ajv_1 = __importDefault(require("ajv"));
const jsonrepair_1 = require("jsonrepair");
exports.FunctionZodSchema = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.string().optional(),
    parameters: zod_1.z.custom(),
    function: zod_1.z.function(),
});
const createUserFunction = (options) => {
    const { name, description, parameters } = exports.FunctionZodSchema.parse(options);
    return {
        name,
        description,
        parameters,
        function: options.function,
        parseArguments: (argsString) => {
            // https://github.com/langchain-ai/langchainjs/issues/2902
            const args = JSON.parse((0, jsonrepair_1.jsonrepair)(argsString));
            const ajv = new ajv_1.default();
            const validate = ajv.compile(parameters);
            const valid = validate(args);
            if (!valid) {
                throw new Error(`Invalid arguments: ${JSON.stringify(validate.errors)}`);
            }
            return args;
        },
    };
};
exports.createUserFunction = createUserFunction;
